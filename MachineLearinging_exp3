import numpy as np
import matplotlib.pyplot as plt
from sklearn.datasets import load_boston
from sklearn.model_selection import train_test_split
from sklearn.linear_model import Lasso
from sklearn.metrics import mean_squared_error
import joblib

# 1. 加载数据集
boston = load_boston()
X, y = boston.data, boston.target

# 2. 划分数据集
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# 3. 选择不同的 alpha 值
alphas = [0.001, 0.01, 0.1, 1, 10, 100]
models = []

# 4. 训练 Lasso 模型并输出预测结果
for alpha in alphas:
    lasso = Lasso(alpha=alpha, random_state=42, max_iter=10000)
    lasso.fit(X_train, y_train)
    y_pred = lasso.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    print(f"Alpha: {alpha}, MSE: {mse}")
    models.append(lasso)  # 存储模型

# 5. 绘制系数对比图
plt.figure(figsize=(12, 8))
plt.suptitle('Lasso Coefficients for Different Alpha Values', fontsize=16)  # 添加总标题并设置字体大小

for i, (alpha, model) in enumerate(zip(alphas, models)):
    plt.subplot(len(alphas), 1, i+1)
    plt.scatter(range(len(model.coef_)), model.coef_, color='blue', edgecolor='black', s=50)
    plt.title(f'Alpha = {alpha}', fontsize=14)  # 设置标题字体大小
    plt.xlabel('Feature Index', fontsize=12)  # 设置轴标签字体大小
    plt.ylabel('Coefficient Value', fontsize=12)
    plt.grid(True)  # 添加网格线

# 6. 保存模型
for i, model in enumerate(models):
    joblib.dump(model, f'lasso_model_alpha_{alphas[i]}.pkl')

# 7. 显示图表
plt.tight_layout(rect=[0, 0.03, 1, 0.95])
plt.show()
