import numpy as np
import matplotlib.pyplot as plt
from sklearn.datasets import load_boston
from sklearn.model_selection import train_test_split
from sklearn.linear_model import Lasso
from sklearn.metrics import mean_squared_error
import joblib
from sklearn.preprocessing import StandardScaler

# 1. 加载数据集
boston = load_boston()
X, y = boston.data, boston.target

# 2. 划分数据集
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# 3.特征工程--标准化
transfer= StandardScaler()
X_train=transfer.fit_transform(X_train)
X_test=transfer.fit_transform(X_test)

# 4. 选择不同的 alpha 值
alphas = [0.001, 0.01, 0.1, 1, 10, 100]

# 5. 训练 Lasso 模型并输出预测结果
for alpha in alphas:
    lasso = Lasso(alpha=alpha, random_state=42)
    lasso.fit(X_train, y_train)
    y_pred = lasso.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    print(f"Alpha: {alpha}, MSE: {mse}")

# 6. 绘制系数对比图
plt.figure(figsize=(12, 8))
for i, alpha in enumerate(alphas):
    lasso = Lasso(alpha=alpha, random_state=42)
    lasso.fit(X_train, y_train)
    plt.subplot(len(alphas), 1, i+1)
    plt.plot(lasso.coef_, marker='o')
    plt.title(f'alpha = {alpha}')
    plt.xlabel('Feature Index',fontsize=10)
    plt.ylabel('Coefficient Value',fontsize=6)

# 7. 保存模型
joblib.dump(lasso, 'lasso_model.pkl')

# 8. 显示图表
plt.tight_layout(rect=[0, 0.03, 1, 0.95])
plt.show()
